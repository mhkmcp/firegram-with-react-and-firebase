{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = file => {\n  const [url, setUrl] = useState(null);\n  const [error, setError] = useState(null);\n  const [progress, setProgress] = useState(null);\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp;\n      collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    url,\n    error,\n    progress\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/Users/macboookpro/react-work/Traversy/firegram-with-react-and-firebase/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","file","url","setUrl","error","setError","progress","setProgress","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB;AAEAJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AAC/C,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAX,MAAAA,WAAW,CAACS,UAAD,CAAX;AACH,KAHD,EAGIG,GAAD,IAAS;AACRd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACH,KALD,EAKG,YAAY;AACX,YAAMjB,GAAG,GAAG,MAAMM,UAAU,CAACY,cAAX,EAAlB;AACA,YAAMC,SAAS,GAAGtB,SAAlB;AACAY,MAAAA,aAAa,CAACW,GAAd,CAAkB;AAAEpB,QAAAA,GAAF;AAAOmB,QAAAA;AAAP,OAAlB;AACAlB,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAVD;AAWH,GAhBQ,EAgBN,CAACD,IAAD,CAhBM,CAAT;AAkBA,SAAO;AAAEC,IAAAA,GAAF;AAAOE,IAAAA,KAAP;AAAcE,IAAAA;AAAd,GAAP;AAEH,CAzBD;;AA2BA,eAAeN,UAAf","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\"\n\nconst useStorage = (file) => {\n    const [url, setUrl] = useState(null)\n    const [error, setError] = useState(null)\n    const [progress, setProgress] = useState(null)\n\n    useEffect(() => {\n        // references\n        const storageRef = projectStorage.ref(file.name)\n        const collectionRef = projectFirestore.collection('images')\n\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage)\n        }, (err) => {\n            setError(err)\n        }, async () => {\n            const url = await storageRef.getDownloadURL()\n            const createdAt = timestamp;\n            collectionRef.add({ url, createdAt })\n            setUrl(url)\n        })\n    }, [file])\n\n    return { url, error, progress }\n\n}\n\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}